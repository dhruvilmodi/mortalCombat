!function(e){var t={};function o(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,a){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(o.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(a,r,function(t){return e[t]}.bind(null,r));return a},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=o(1),r=o(2),n=new r.default("Bert Bertocimus"),i=new r.default("Fredacious Fredicus");new a.default(n,i)},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){this.startingPlayer=0,this.fighter1=e,this.fighter2=t,this.fighters=[this.fighter1,this.fighter2],console.log("welcome "+e.tamName+" and "+t.tamName+" to MORTAL KOMBAT!!!!"),this.initMatch()}return e.prototype.initMatch=function(){console.log("Fight!"),this.startingPlayer=this.determineFirstFighter(),this.meleRound(this.fighters,this.startingPlayer)},e.prototype.determineFirstFighter=function(){return Math.random()>.5?0:1},e.prototype.meleRound=function(e,t){var o=this.determineCombatRoles(t),a=e[o.attacker],r=e[o.defender],n=a.attack(),i=r.defend();if(!0===this.determineStrikeOutcome(n,i)?(console.log(a.getFighterName()+" hits "+r.getFighterName()+" with "+n.foodName+" for "+n.damage+"!"),r.takeDamage(n.damage)):console.log(a.getFighterName()+" misses "+r.getFighterName()+" with "+n.foodName+"!"),console.log(a.getFighterName()+": "+a.getHP()+" "+r.getFighterName()+": "+r.getHP()),r.getHP()<=0)console.log(a.getFighterName()+" has won!");else{var f=void 0;f=0==t?1:0,this.meleRound(e,f)}},e.prototype.determineCombatRoles=function(e){var t=0;return 0==e&&(t=1),{attacker:e,defender:t}},e.prototype.determineStrikeOutcome=function(e,t){var o=.45;return e.foodCat==t.weakAgainst&&(o*=2),e.foodCat==t.strongAgainst&&(o/=2),Math.random()>=o},e}();t.default=a},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this.defenseCharacteristics={strongAgainst:"fruit",weakAgainst:"grain"},this.tamName=e,this.hp=60,console.log("my name is "+this.tamName),this.foods=[{foodName:"bhel",foodCat:"grain",damage:6},{foodName:"jalebi",foodCat:"grain",damage:3},{foodName:"vadapav",foodCat:"meat",damage:2},{foodName:"sukhdi",foodCat:"grain",damage:3},{foodName:"bhaji Pav",foodCat:"grain",damage:3},{foodName:"chole",foodCat:"meat",damage:3},{foodName:"cherry",foodCat:"meat",damage:10},{foodName:"mango",foodCat:"grain",damage:12},{foodName:"apple",foodCat:"fruit",damage:10},{foodName:"pineapple",foodCat:"fruit",damage:8}]}return e.prototype.getFighterName=function(){return this.tamName},e.prototype.defend=function(){return this.defenseCharacteristics},e.prototype.attack=function(){var e=Math.floor(Math.random()*this.foods.length);return this.foods[e]},e.prototype.takeDamage=function(e){this.hp-=e},e.prototype.getHP=function(){return this.hp},e}();t.default=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,